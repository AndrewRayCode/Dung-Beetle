dungCatch("if(!$defined(style)) {var last = current_dom_node.getLast();var html = ' <span class=\\"dung_html_prop\\">style</span>=\\"<span class=\\"dung_attr_edit\\"></span><span class=\\"dung_html_attr\\">\\"</span>';if(last) {new Element('span', {'class':'dung_html_attr'}).inject(last, 'after').innerHTML = html;} else {current_dom_node.innerHTML = current_dom_node.innerHTML.substring(0, current_dom_node.innerHTML.length - 4) + '<span class=\\"dung_html_attr\\">' + html + '</span>&gt;';}}}//Create the inputsstyle_group.injectBefore(css_group.getChildren()[1]).innerHTML = '<div class=\\"cancel\\"></div><span class=\\"dung_attr\\"><input class=\\"edit_input\\" /></span>: <span class=\\"dung_val\\"><input class=\\"edit_input\\" /></span>;';// Wire the two inputs for clickingstyle_group.getFirst().getNext().getFirst().addEvent('keydown', inputKeyEvent).addEvent('keyup', inputKeyEvent).focus();style_group.getChildren()[2].getFirst().addEvent('keydown', inputKeyEvent).addEvent('keyup', inputKeyEvent);}}// Key handler for consolefunction consoleKeyEvent(event) {}function executeConsole() {}// Key event handler for all input fields when editing values. Determines action based on what input it isfunction inputKeyEvent(mixed) {var event, input;if($type(mixed) == 'event') {event = mixed;input = event.target;} else {event = {'key':'esc'};input = mixed;}var parent = input.getParent();var grandparent = parent.getParent();var greatparent = grandparent.getParent();if(greatparent.getFirst().getFirst().innerHTML == 'element.style') {var style;for(var x=0, children = current_dom_node.getChildren(); x<children.length; x++) {if(children[x].getFirst().innerHTML.toString() == 'style') {style = children[x].getFirst().getNext();}}style.innerHTML = splatStyles(greatparent);}// They key event came from a CSS attribute, like \\"border\\" in \\"border: 3px solid blue\\"if(parent.hasClass('dung_attr')) {if(event.key != 'backspace') { autoComplete(input, valid_css_elements); }if(input.value.indexOf(':') > 1 || ((event.key == 'tab' || event.key == 'enter') && input.value.length > 0)) {input.value = input.value.replace(':', '').trim();input.getParent().innerHTML = this.colorize(input.value);// Either focus on the next box or...var nextInput = parent.getNext().getFirst();if(nextInput != null) {// Focus on the next area for editing, hack because IE does not focus, probably race conditionsetTimeout(function() {parent.getNext().getFirst().focus();}, 1);} else {new Event(event).stop();grandparent.removeClass('new');if(event.key == 'enter') {compileStyles(greatparent);} else {editValue(parent.getNext());setTimeout(function() {parent.getNext().getFirst().select();}, 1);}}} else if(event.key == 'esc' || event.key == 'enter' || event.key == 'tab') {input.value = input.value.trim();if(grandparent.hasClass('new')) {grandparent.destroy();} else {grandparent.removeClass('new');parent.innerHTML = input.original_value;input.destroy();}}// The key event came from a CSS value, like \\"3px solid blue\\" in \\"border: 3px solid blue\\"} else if(parent.hasClass('dung_val')) {compileStyles(greatparent);if(event.key != 'backspace') { autoComplete(input, input_ac_words); }if((event.key == 'tab' || event.key == 'enter') && input.value.length > 0) {input.value = input.value.replace(';', '').trim();input.getParent().innerHTML = this.colorize(input.value);grandparent.removeClass('new');compileStyles(greatparent);} else if((event.key == 'esc' || event.key == 'tab'|| event.key == 'enter') && !grandparent.hasClass('new')) {input.value = input.value.trim();if(grandparent.hasClass('new') || input.value.length == 0) {grandparent.destroy();} else {grandparent.removeClass('new');parent.innerHTML = input.original_value;input.destroy();}}// Event fired from DOM node} else if(parent.hasClass('dung_html_prop') || parent.hasClass('dung_attr_edit')) {var isAttribute = parent.hasClass('dung_html_prop');if(!isAttribute) {applyAttributes(greatparent);}current_dom_node = greatparent;current_element = current_dom_node.hover_highlight;if((input.value.indexOf('=') > 1 && isAttribute) || (event.key == 'tab' && input.value.length > 0)) {parent.innerHTML = input.value;input.destroy();applyAttributes(greatparent);} else if(event.key == 'enter' && input.value.trim().length > 0) {if(input.value != input.original_value) { current_element.erase(input.original_value);}parent.innerHTML = input.value;applyAttributes(greatparent);input.destroy();} else if(event.key == 'enter' || event.key == 'tab') {if(isAttribute) {parent.innerHTML = input.original_value;parent.getNext().innerHTML = '';} else {parent.innerHTML = '';}applyAttributes(greatparent);grandparent.destroy();} else if(event.key == 'esc') {parent.innerHTML = input.original_value;}}// Auto size the input fieldinput.setStyle('width', ((input.value.length * 7) + 8)+'px');};// Applies attributes set from DOM editing to the actual element in page bodyfunction applyAttributes(tag_open, set_to) {var children = tag_open.getChildren();for(var x=0; x<children.length; x ++) {// Get the attribute (like \\"class\\") and the value (like \\"content\\") from either input box or already-compiledvar first = children[x].getFirst().getFirst();var attr = first ? first.value : children[x].getFirst().innerHTML;first = children[x].getFirst().getNext().getFirst();var value = first ? first.value : children[x].getFirst().getNext().innerHTML;if(attr == 'style') {current_element.erase('style');var styles = value.split(';');for(var y=0; y<styles.length; y++) {var pair = styles[y].trim().split(':');current_element.setStyle(pair[0], pair[1]);}} else {current_element.set(attr, set_to ? null : value);}}inspectElement(current_element);}function getTags(elem) {if(elem == null) { return ''; }var holder = new Element('div', {});elem.clone().inject(holder);var tags = holder.innerHTML;//tags = tags.replace(/>([^<]+)</, '>'++'<');holder.dispose();return tags;}// Seat the console on the bottom of the screenfunction stickConsole() {}function isValidCSSAttr(str) {for(var x=0; x<valid_css_elements.length; x++) {if(valid_css_elements[x] == str) {return true;}}return false;}// Auto-complete for input fields. Suggestions come from objectfunction autoComplete(input, match_obj) {var orig_value = input.value;if(orig_value.length == 0) {return;}var match = orig_value.match(/[^ ]+($)/);if( match == null) {return;}var wordToTest = match[0];for(var x=0; x <match_obj.length; x++) {var word = match_obj[x];if(word == wordToTest) {return;}if(word.indexOf(wordToTest) == 0) {input.value = orig_value.replace(new RegExp(word, 'g'), word.charAt(0)+'###'+word.substr(1));input.value = orig_value.replace(new RegExp(wordToTest+'$'), '') + word;input.value = input.value.replace('###', '');if(input.setSelectionRange) {input.setSelectionRange(orig_value.length, input.value.length);} else {range = input.createTextRange();range.findText(word.substr(wordToTest.length), -2);range.select();}break;}}}function getCurrentStyleTag() {for(var x=0, children = current_dom_node.getChildren(); x<children.length; x++) {if(children[x].getFirst().innerHTML.toString() == 'style') {return children[x].getFirst();}}}// Strip all HTML tags from a valuefunction dungStripTags(str) {return str.replace(/\\<[^>]+\\>/g, '');}function stopKeyDown(event) {var e = new Event(event).stop();}");